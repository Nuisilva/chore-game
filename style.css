@import url(http://fonts.googleapis.com/css?family=Paytone+One);
@import url(http://fonts.googleapis.com/css?family=Roboto+Slab|Open+Sans:400italic,700italic,400,700);
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
body {
  width: 100%;
  height: 100%;
  margin: 0;
  background-image: url(assets/background.jpg);
  font: "Roboto Slab", serif;
  color: white;
}

.child_job_name {
  background-color: rgba(241, 240, 241, 0.295);
  position: absolute;
  left: 25%;
  float: left;
  clear: none;
  width: 74.25%;
  margin-left: 0;
  margin-right: 3%;
  z-index: 8;
}

.child_job_name:last-child {
  margin-right: 0;
}

.p_kids:hover {
  background-color: rgba(124, 176, 199, 0.3);
}

.p_kids:active {
  background-color: #f1f0f1;
  opacity: 0.231;
}

.kid_holder {
  float: left;
  clear: none;
  width: 22.75%;
  margin-left: 0;
  margin-right: 3%;
  display: flex;
  flex-direction: column;
}

.kid_holder:last-child {
  margin-right: 0;
}

.p_nav {
  width: 100%;
  background-color: rgba(124, 176, 199, 0.3);
}

.p_nav h1 {
  float: left;
  clear: none;
  width: 31.33333%;
  margin-left: 0;
  margin-right: 3%;
  font-size: 5em;
  margin: 0;
  text-align: center;
}

.p_nav h1:last-child {
  margin-right: 0;
}

.p_wrapper {
  width: 100%;
}

.p_jobs {
  float: left;
  clear: none;
  width: 58.8%;
  margin-left: 0;
  margin-right: 3%;
}

.p_jobs:last-child {
  margin-right: 0;
}

.jobz_disp {
  float: left;
  clear: none;
  width: 22.75%;
  margin-left: 0;
  margin-right: 3%;
}

.jobz_disp:last-child {
  margin-right: 0;
}

.k_wrapper {
  float: left;
  clear: none;
  width: 79.4%;
  margin-left: 0;
  margin-right: 3%;
  display: flex;
}

.k_wrapper:last-child {
  margin-right: 0;
}

.kid_font {
  width: 35%;
  float: right;
  font-size: 38px;
  font-family: "Open Sans";
  color: white;
  line-height: 1.2;
  -moz-transform: matrix(1.5504, 0, 0, 1.5504, 0, 0);
  -webkit-transform: matrix(1.5504, 0, 0, 1.5504, 0, 0);
  -ms-transform: matrix(1.5504, 0, 0, 1.5504, 0, 0);
}

.info_holder {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  display: flex;
  flex-direction: column;
}

.info_holder:last-child {
  margin-right: 0;
}

.top_bar {
  background-image: url(assets/kid_bar.svg);
  background-repeat: no-repeat;
  display: flex;
  flex-direction: row;
  align-items: center;
}

.avatar {
  width: 100%;
  padding: 15%;
  position: relative;
  opacity: 0.5;
}

.avatar:hover {
  opacity: 1.0;
}

.avatar_wrapper {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
}

.avatar_wrapper:last-child {
  margin-right: 0;
}

.gem {
  padding: 2%;
}

.gem_holder {
  margin: 5%;
  display: flex;
  flex-direction: row;
  border-width: 2px;
  border-color: rgba(255, 255, 255, 0.702);
  border-style: solid;
  border-radius: 15px;
  vertical-align: center;
}

.gem_holder p {
  color: white;
}

.kid_info {
  float: right;
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
}

.kid_info:last-child {
  margin-right: 0;
}

.jobz_bar {
  background-image: url(assets/job_bar.svg);
  background-repeat: no-repeat;
  padding: 40px;
}

.circle {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  float: left;
  background-image: url(assets/circle.svg);
  background-repeat: no-repeat;
}

.circle:last-child {
  margin-right: 0;
}
