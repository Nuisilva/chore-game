@import url(http://fonts.googleapis.com/css?family=Paytone+One);
@import url(http://fonts.googleapis.com/css?family=Roboto+Slab|Open+Sans:400italic,700italic,400,700);
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
.job_holder {
  float: left;
  clear: none;
  width: 66.66667%;
  margin-left: 0;
  margin-right: 0;
  background-color: rgba(241, 240, 241, 0.259);
}

.job_holder div {
  display: inline-block;
  width: 50%;
}

.kid_holder {
  float: left;
  clear: none;
  width: 33.33333%;
  margin-left: 0;
  margin-right: 0;
}

.jobz_disp {
  display: flex;
  float: left;
  clear: none;
  width: 25%;
  margin-left: 0;
  margin-right: 0;
  justify-content: flex-start;
}

body {
  background-image: url(assets/4.jpg);
}

.k_wrapper {
  opacity: 0.8;
}

.k_wrapper:hover {
  background-color: #f1f0f1;
  opacity: 1.0;
  color: orange;
}

.avatar_wrapper {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  padding-bottom: 5%;
  text-align: center;
}

.avatar_wrapper:last-child {
  margin-right: 0;
}

.avatar_wrapper div {
  background-image: url(assets/circle.svg);
  background-repeat: no-repeat;
}

.avatar_wrapper div img {
  margin: 18%;
  width: 65%;
  vertical-align: center;
}

.info_wrapper {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.info_wrapper:last-child {
  margin-right: 0;
}

.info_wrapper h1:hover {
  color: orange;
}

.info_wrapper div {
  border-width: 2px;
  border-color: white;
  border-style: solid;
  border-radius: 20px;
  margin-bottom: 5%;
  display: flex;
  flex-direction: row;
}

.info_wrapper div img {
  float: left;
  clear: none;
  width: 22.75%;
  margin-left: 0;
  margin-right: 3%;
  vertical-align: center;
}

.info_wrapper div img:last-child {
  margin-right: 0;
}

.info_wrapper div p {
  color: #fff;
  font-family: opensans, san-seriff;
}

.top_opacity {
  background-color: rgba(241, 240, 241, 0.295);
  width: 100%;
}

#index_btn {
  border-width: 2px;
  border-color: white;
  border-style: solid;
  border-radius: 20px;
  opacity: 0.702;
  width: 252px;
  height: 40px;
}

.mid {
  width: 50%;
  margin: 0 auto;
}

.shadow {
  -webkit-box-shadow: 3px 3px 5px 6px #000;
  /* Safari 3-4, iOS 4.0.2 - 4.2, Android 2.3+ */
  -moz-box-shadow: 3px 3px 5px 6px #000;
  /* Firefox 3.5 - 3.6 */
  box-shadow: 3px 3px 5px 6px #000;
  /* Opera 10.5, IE 9, Firefox 4+, Chrome 6+, iOS 5 */
}

h1, h2, h3, h4 {
  color: white;
}

h2 {
  font-size: 50px;
}

.chore_create {
  display: flex;
  flex-direction: column;
}

.chore_create form {
  float: left;
  clear: none;
  width: 66.66667%;
  margin-left: 0;
  margin-right: 0;
}

.chore_create form input {
  color: black;
  border-width: 2px;
  border-color: white;
  border-style: solid;
  border-radius: 20px;
  opacity: 0.702;
}

.chore_create ul {
  display: flex;
  flex-direction: column;
}

.wrapper {
  background-image: url("assets/bg.svg");
  background-repeat: no-repeat;
  height: 140px;
  width: 50%;
  margin: 0 auto;
}

.wrapper .info {
  float: left;
  clear: none;
  width: 50%;
  margin-left: 0;
  margin-right: 0;
}

.wrapper .info div {
  padding-top: 20px;
  padding-left: 40%;
  color: white;
}

.wrapper .info h2 {
  float: left;
  clear: none;
  width: 50%;
  margin-left: 40%;
  margin-right: 0;
  margin-left: 40%;
  margin-top: 5%;
}

.wrapper .icons {
  float: left;
  clear: none;
  width: 50%;
  margin-left: 0;
  margin-right: 0;
}

.wrapper .icons .store, .wrapper .icons .battle, .wrapper .icons .chores {
  float: left;
  clear: none;
  width: 25%;
  margin-left: 0;
  margin-right: 0;
  margin-left: 5%;
  margin-top: 25%;
}

.daJobzz {
  float: left;
  clear: none;
  width: 50%;
  margin-left: 0;
  margin-right: 0;
  background-color: rgba(241, 240, 241, 0.259);
}

.info_holder {
  width: 50%;
  overflow: hidden;
}

.info_robot {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  padding-right: 1px;
  float: left;
}

.info_robot:last-child {
  margin-right: 0;
}

.stats {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  color: white;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.stats:last-child {
  margin-right: 0;
}
